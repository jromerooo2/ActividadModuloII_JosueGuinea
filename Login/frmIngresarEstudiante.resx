<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEAIABoBAAAJgAAACAgAAABACAAqBAAAI4EAAAoAAAAEAAAACAAAAABACAAAAAAADAE
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZANCwGQTdPBkE3TwZA
        NCwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkE4UgZCNtwGQjf/BkI3/wZC
        N/8GQjf/BkI32wZDNlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkI4fAZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf+BkE3eQAAAAAAAAAAAAAAAAAAAAAAAAAABkE4UgZCN/8GQjf/B0I4lwZD
        N8sGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/4GQTdPAAAAAAAAAAAAAAAAAAAAAQZCN90GQjf/BkI3/wVB
        ODcGQjh8BkI2+AZCOLMGQjfkBkI3/wZCN/8GQjf/BkI32gAAAAEAAAAAAAAAAAVANjQGQjf/BkI3/wZC
        N/8APDwRBkQ4KQBHORIAOzsNBkI32QZCN/8GQjf/BkI3/wZCN/8FRDkxAAAAAAAAAAAGQTZaBkI3/wZC
        N/8HQjfrAAAAAQZDN+YKPTMZB0I2mwZCN/8GQjf/BkI3/wZCN/8GQjf/BkI2WQAAAAAAAAAABkI2WQZC
        N/8GQjf/BkI32QBAMBAHQzdFBUI3XQZCN/QGQjizBkM3LgZCN+QGQjf/BkI3/wZDN1gAAAAAAAAAAAVA
        NjQGQjf/BkI3/wZCN90AAAAACEQ4RAZCNvgFQjfoBkA0LAAAAAEFQjiTBkI3/wZCN/8FRDkxAAAAAAAA
        AAAAAAABBkI33QZCN/8GQjf+BkI3qwZCN/cGQjf/BkI3/wdCNmwGQzZ2BkE2twZCN/8GQjfaAAAAAQAA
        AAAAAAAAAAAAAAZBOFIGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf+BkE3TwAA
        AAAAAAAAAAAAAAAAAAAAAAAABkI4fAZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf+BkE3eQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQThSBkI33QZCN/8GQjf/BkI3/wZCN/8GQjfbBkM2UAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAIEQjk6BkI2VQZCNlUEQzY5AAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//AAD//wAA+B8AAPAPAADgBwAAxgMAAMeDAADFAwAAxyMAAMZj
        AADAYwAA4AcAAPAPAAD4HwAA//8AAP//AAAoAAAAIAAAAEAAAAABACAAAAAAAIAQAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAVVUDCEE1QwVCOI4GQjiuBkI3xgZCN8YGQjiuBUE2jQhCNkIAVVUDAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAASTcOBkI4gAdCNuoGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wVC
        N+kGQzd+ADs7DQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAABkI2WQZCN+wGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8HQjfrBkM4VwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAQZBN4EGQjf+BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf+BkI2fwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGQTd5BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI4dwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkM4VwZCN/4GQjf/BkI3/wZCN/8GQjf8BkI4pQZC
        N98GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf+BkM3VAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABEMw8HQjfrBkI3/wZCN/8GQjf/BkI3/wZC
        N60AAAAAB0E2SwZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8FQjfpADs7DQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkI2fwZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3gwAAAAAGQjZZBkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjh8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAQGQjftBkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQzdcAAAAAAxGOhYGQjh8BkI44QZCN/8GQTa3DEY6FgVCN4wGQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wdCN+sAVVUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACEI2QgZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wVBODcAAAAAAAAAAAAAAAAAVVUDB0I4TQA9PRUAAAAAB0E2cQZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wRBOT8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAGQTiJBkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/ADw8EQAAAAAHQTZxBkM3LgAAAAAAAAAAAAAAAAdD
        NiYGQjfyBkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkM3hgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAZCN6YGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN+wAAAAAAAAAAAZCN+UGQjf/BUM2XwAA
        AAAASUkHBkI3zAZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQTakAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAB0I3wQZCN/8GQjf/BkI3/wZCN/8GQjf/BkM3xwAAAAAAgAACBkI3+wVC
        N7oAVVUDAAAAAAdCNpsGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wVB
        N78AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFQTe/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjayAAAAAAtA
        NRgGQTfeAEAzFAAAAAAFQjddBkI3/wZCN/8GQjf/BkI3/wZBN4EAPDwRBkI3zAZCN/8GQjf/BkI3/wZC
        N/8GQjf/BUI3vgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZCN6YGQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N6IAAAAAB0A5JAdDNiYAAAAABkA0LAZCN/QGQjf/BkI3yAVCOTYHQzhyADs7DQAAAAAFQje6BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQTakAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkI2iAZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkE2pAAAAAAAAAAAAAAAAAhCOh8GQjfkBkI3/wZCN/8FQjaSAAAAAAAAAAAAAAAAAFVVAwZC
        NqkGQjf+BkI3/wZCN/8GQjf/BkI3/wZDN4YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIQjZCBkI3/wZC
        N/8GQjf/BkI3/wZCN/8HQjfBAAAAAAAAAAAAQDMUBkI32AZCN/8GQjf/BkI3/wZCN/0GQTeoAFUrBgAA
        AAAAAAAAAAAAAAVDN5EGQjf/BkI3/wZCN/8GQjf/BEE5PwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA
        QAQGQjftBkI3/wZCN/8GQjf/BkI3/wZCN/wFQjZoB0M5SAZCN9YGQjf/BkI3/wZCN/8GQjf/BkI3/wdC
        N8QAAAAAAFUrBgVDNmMHRTclBkI3uQZCN/8GQjf/BkI3/wdCN+sAVVUDAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAZCNoQGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI4ygA5OQkHQzdrBkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkE3gQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAEQzDwdCN+sGQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI2+AZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wVCN+kAOzsNAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkM4VwZCN/4GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf+BkM3VAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkI2iAZCN/8GQjf/BkI3/wZC
        N/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZB
        OIUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBkE3gQZC
        N/4GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/4GQjZ/AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAABkI2WQZCN+4GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjftBkM4VwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAEc5EgVBNo0GQjfzBkI3/wZCN/8GQjf/BkI3/wZCN/8GQjf/BkI3/wZC
        N/8GQjfzBkI3iwA8PBEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAgHQjhJBUI3jwZCOK4GQjfGBkI3xgZC
        OK4FQjiOB0M5SABJSQcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/////////////////4H///wAf//4AB//4AAP/+AAB//AAAP/gY
        AB/4GAAf8DxAD/A/4A/gP8AH4DOAB+AzAAfgNwQH4D48B+A8PAfwOB4P8DAeD/AAGA/4AAAf/AAAP/wA
        AD/+AAD//4AB///AA///+B//////////////////
</value>
  </data>
</root>